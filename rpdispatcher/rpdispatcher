#!/usr/local/bin/php
<?php

# RedPorts dispatcher
#
# $Id$

/************************************************************

Tabelle: backends
"name"		eindeutiger Name
"description"	Klartextbeschreibung
"group"		Buildgruppe
"priority"	Prioritaet
"type"		"tinderbox", "rpsanity", "ports-sandbox" ...
"maxbuilds"	Maximale gleichzeitige builds
"status"	0=ok, 1=maintenance, 2=error

Tabelle: buildqueue
"id"		Eindeutige ID in buildqueue
"owner"		Eigentuemer (=Committer)
"repository"	Repository pfad
"revision"	SVN Revisionsnummer
"portname"	Portname (www/nginx)
"status"	0=New, 1=In Progress, 2=Finished
"startdate"	Startdatum
"enddate"	Enddatum

Tabelle: builds
"id"		Eindeutige ID in builds
"queueid"	Referenz auf buildqueue Eintrag
"group"		Buildgruppe
"status"	Siehe Statustabelle
"status"	0=Unknown, 1=Success, 2=Leftover, 3=Error, 9=Internal Error
"backend"	Backend auf dem gebaut wird
"startdate"	Startdatum
"enddate"	Enddatum

Build Status:
1X	Waiting
3X	Starting
5X	Building
7X	Transferring
9X	Finished

0	Eintragen einer Zeile pro backend gruppe
10	Auswahl eines freien backends aus der Gruppe (nach Prioritaet und maxbuilds) sonst warten
30	Senden des build Auftrags an das backend
31	Starten des build Auftrags am backend
50	Warten auf Antwort von backend
70	Warte auf freien Slot fuer Uebertragung von backend
71	Uebertragen der Logdateien von backend auf Redports
72	Uebertragen des Work directories von backend auf Redports
90	Build abgeschlossen

************************************************************/

define('DBCONN',	'mysql:host=localhost;dbname=trac');
define('DBUSER',	'root');
define('DBPASS',	'');

$DB = new PDO(DBCONN, DBUSER, DBPASS) or die("Cannot cannot to Database");


function stat10Handler($DB)
{
	foreach($DB->query('SELECT id FROM buildqueue WHERE status = 0') as $row)
	{
		foreach(getBuildGroups($DB) as $group)
		{
			$startdate = time()*1000;

			$query = $DB->prepare('INSERT INTO builds (`queueid`, `group`, `status`, `buildstatus`, `backend`, `startdate`, `enddate`) VALUES(:queueid, :group, 10, 0, "", :startdate, 0)');
			$query->bindParam('queueid', $row['id']);
			$query->bindParam('group', $group);
			$query->bindParam('startdate', $startdate);
			$query->execute() || die(join(' ', $query->errorInfo()));
		}

		$query = $DB->prepare('UPDATE buildqueue SET status = 1 WHERE id = :id');
		$query->bindParam('id', $row['id']);
		$query->execute();
	}
}

function stat11Handler($DB)
{
	foreach($DB->query('SELECT id, `group` FROM builds WHERE status = 10') as $row)
	{
		$backend = getBackendForGroup($DB, $row['group']);
		if($backend !== null)
		{
			$query = $DB->prepare('UPDATE builds SET status = 30, backend = :backend WHERE id = :id');
			$query->bindParam('backend', $backend);
			$query->bindParam('id', $row['id']);
			$query->execute();
		}
	}
}

function getBuildGroups($DB)
{
	$groups = array();

	foreach($DB->query('SELECT DISTINCT `group` FROM backends') as $row)
		$groups[] = $row['group'];

	return $groups;
}

function getBackendForGroup($DB, $group)
{
	$query = $DB->prepare('SELECT name, maxbuilds FROM backends WHERE `group` = :group AND status = 0 ORDER BY priority');
	$query->bindParam('group', $group);
	$query->execute() || die(join(' ', $query->errorInfo()));

	foreach($query->fetchAll() as $row)
	{
		$currentBuilds = getCurrentBuilds($DB, $row['name']);
		if($currentBuilds !== null && $currentBuilds < $row['maxbuilds'])
			return $row['name'];
	}

	return null;
}

function getCurrentBuilds($DB, $backend)
{
	$query = $DB->prepare('SELECT count(*) FROM builds WHERE backend = :backend AND status BETWEEN 30 AND 89');
	$query->bindParam('backend', $backend);
	$query->execute();
	$result = $query->fetch();

	return $result[0];
}

stat10Handler($DB);
stat11Handler($DB);

