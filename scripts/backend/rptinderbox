#!/bin/sh

# RedPorts tinderbox backend
#
# $Id$
#
# /tmp/rptinderbox/.lock              Global lock for maintenance
# /tmp/rptinderbox/<build>/.lock      Build lock including shellscript variables
# /tmp/rptinderbox/<build>/.checkout  Checkout done
# /tmp/rptinderbox/<build>/.build     Build started
# /tmp/rptinderbox/<build>/.finished  Build finished
# /tmp/rptinderbox/<build>/ports/     Portstree overlay
#
# /usr/local/tinderbox/portstrees/<portstree>/ports/   Tinderbox portstree
# 

#REPOBASE=http://svn.redports.org/
REPOBASE=https://svn.bluelife.at/
ZFSROOT="zroot/tinderbox/%s/portstree"

WRKBASE=/tmp/rptinderbox
LOG=${WRKBASE}/rptinderbox.log
TINDERBOX=/usr/local/tinderbox

checkout()
{
  REPOSITORY=$1
  REVISION=$2
  BUILD=$3

  if [ -f "${WRKBASE}/.lock" ]; then
    echo "Maintenance lock exists." >> ${LOG}
    return 1
  fi

  LOCK=${WRKBASE}/${BUILD}/.lock

  if [ -f "${LOCK}" ]; then
    echo "Lock ${LOCK} exists." >> ${LOG}
    return 1
  fi

  if [ ! -d "${WRKBASE}/${BUILD}" ]; then
    mkdir -p ${WRKBASE}/${BUILD} || return 1
  fi

  # create build lock
  touch ${LOCK} || return 1

  PORTSTREE=`${TINDERBOX}/scripts/tc getPortsTreeForBuild -b ${BUILD} 2>/dev/null`

  if [ -z "${PORTSTREE}" ]; then
    echo "Unknown portstree for build ${BUILD}" >> ${LOG}
    return 1
  fi

  # populate lock
  echo "REPOSITORY=\"${REPOSITORY}\"" >> ${LOCK}
  echo "REVISION=\"${REVISION}\"" >> ${LOCK}
  echo "BUILD=\"${BUILD}\"" >> ${LOCK}
  echo "PORTSTREE=\"${PORTSTREE}\"" >> ${LOCK}
  echo "LOCK=\"${LOCK}\"" >> ${LOCK}

  # checkout overlay ports
  svn export --non-interactive --revision ${REVISION} ${REPOBASE}${REPOSITORY} ${WRKBASE}/${BUILD}/ports >> ${LOG} || return 2

  # create snapshot of original tree
  ZFSVOLUME=`printf "${ZFSROOT}" ${PORTSTREE}`
  zfs snapshot ${ZFSVOLUME}@work || return 3

  # Todo: apply overlay ports
  
  # checkout finished
  touch ${WRKBASE}/${BUILD}/.checkout || return 1
  
  return 0
}

clean()
{
  BUILD=$1
  LOCK=${WRKBASE}/${BUILD}/.lock

  if [ ! -f "${LOCK}" ]; then
    echo "No lock for build ${BUILD}" >> ${LOG}
    return 1
  fi

  . ${LOCK}

  if [ -f "${WRKBASE}/${BUILD}/.build" ]; then
      if [ ! -f "${WRKBASE}/${BUILD}/.finished" ]; then
        ${TINDERBOX}/scripts/tc rmBuildPortsQueueEntry -b ${BUILD} -d ${PORT} >> ${LOG}
      fi
  fi

  ZFSVOLUME=`printf "${ZFSROOT}" ${PORTSTREE}`
  zfs rollback ${ZFSVOLUME}@work
  zfs destroy ${ZFSVOLUME}@work

  # Todo: buildlogs wegkopieren
  # Todo: package wegkopieren

  # port von package feststellen: pkg_info -oq paket.tbz

  # cleanroom modus:
  # Todo: alle packages aelter als gemerktes "latest package" pruefen
  #       und falls port in overlay tree vorhanden dann package loeschen

  # standard modus:
  # Todo: alle packages aelter als gemerktes "latest package" pruefen
  #       und falls package unser port dann vorhandenes package loeschen
  #       nicht reinraum modus aber gut fuer grosse trees wie KDE, Qt, Xorg
  #       weil dependencies im eigenen tree nicht geloescht werden

  rm -rf ${WRKBASE}/${BUILD} || return 1

  return 0
}

build()
{
  PORT=$1
  BUILD=$2
  PRIORITY=$3
  LOCK=${WRKBASE}/${BUILD}/.lock

  if [ -f "${WRKBASE}/.lock" ]; then
    echo "Maintenance lock exists." >> ${LOG}
    return 1
  fi

  if [ ! -f "${LOCK}" ]; then
    echo "No lock for build ${BUILD}" >> ${LOG}
    return 1
  fi

  . ${LOCK}

  if [ ! -f "${WRKBASE}/${BUILD}/.checkout" ]; then
    echo "No checkout for build ${BUILD}" >> ${LOG}
    return 1
  fi

  if [ -f "${WRKBASE}/${BUILD}/.build" ]; then
    echo "Build already running" >> ${LOG}
    return 1
  fi

  if [ -f "${WRKBASE}/${BUILD}/.finished" ]; then
    echo "Build already finished" >> ${LOG}
    return 1
  fi

  # Todo: aktuellstes package von build merken
  # creation time des aktuellstes package:
  # OLDESTFILE=`ls -tr /usr/local/tinderbox/packages/9-FreeBSD/All | tail -1`
  # OLDESTDATE=`stat -f %m ${OLDESTFILE}`
  # OLDESTDATE=`date -r ${OLDESTDATE} "+%Y-%m-%d %H:%M:%S"`
  # echo $OLDESTDATE
  # NEWFILES=`find /usr/local/tinderbox/packages/9-FreeBSD/All/ -type f -newermt "${OLDESTDATE}" -print

  echo "PORT=\"${PORT}\"" >> ${LOCK}
  echo "PRIORITY=\"${PRIORITY}\"" >> ${LOCK}

  ${TINDERBOX}/scripts/tc addBuildPortsQueueEntry -b ${BUILD} -d ${PORT} -p ${PRIORITY} 2>/dev/null

  touch ${WRKBASE}/${BUILD}/.build

  return $?
}

status()
{
  BUILD=$1

  if [ -f "${WRKBASE}/${BUILD}/.finished" ]; then
    echo "finished"
    return 1
  fi

  if [ -f "${WRKBASE}/${BUILD}/.build" ]; then
    echo "building"
    return 1
  fi

  if [ -f "${WRKBASE}/${BUILD}/.lock" ]; then
    echo "used"
    return 1
  fi

  echo "idle"
  return 0
}


case "$1" in
'build')
  build $2
  return $?
;;
'checkout')
  checkout $2 $3 $4
  return $?
;;
'clean')
  clean $2
  return $?
;;
'status')
  status
  return $?
;;
*)
  echo "Usage: $0 [build|checkout|clean] param"
  exit 1
;;
esac

exit 0
