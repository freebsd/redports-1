#!/bin/sh

# RedPorts poudriere backend helper
#
# $Id$
#

POUDRIERE=/poudriere
ZFSROOT=zroot

poudriere_checkout()
{
    TYPE=$1
    REPOSITORY=$2
    REVISION=$3
    BUILD=$4

    echo "do checkout for ${BUILD}"
  
    return 0
}

poudriere_build()
{
    PORT=$1
    BUILD=$2
    PRIORITY=$3
    FINISHURL=$4

    echo "do build for ${BUILD}"

    return 0
}

poudriere_status()
{
    BUILD=$1
    STATUS="unknown"
    BUILDSTATUS=""

    set -- `poudriere status -H -j ${BUILD} -p ${BUILD} -z 0 -l -f`

    zset=${1}
    tree=${2}
    jail=${3}
    build=${4}
    status=${5}
    queue=${6}
    built=${7}
    fail=${8}
    skip=${9}
    ignore=${10}
    remain=${11}
    time=${12}
    logs=${13}

    case $status in
	"done")
	    STATUS="finished" ;;
	"balancing_pool"|"build_port_done"|"building"|"clean_pool"|"clean_restricted"|"cleaning"|"committing"|"computingdeps"|"computingrdeps"|"index"|"loading_moved"|"parallel_build"|"pkgrepo"|"sanity"|"starting_builders"|"starting_jobs"|"stopping_jobs"|"updating_stats"|"stage-qa"|"check-plist"|"leftovers")
	    STATUS="building" ;;
	"idle")
	    STATUS="idle"
	    PORTSTREE=${POUDRIERE}/ports/${BUILD}
	    # XXX
	    PORTSTREELASTBUILT=some timestamp I have to figure out the format of

	    echo "PORTSTREELASTBUILT=${PORTSTREELASTBUILT}"
	    ;;
	*)
	    STATUS="finished"
	    BUILDSTATUS=$status
	    ;;
    esac

    # XXX
    # Do some archeology on what's in there, where it comes from, and how rppd
    # uses those.
    if [ -f "${WRKBASE}/${BUILD}/.finished" ]; then
        . ${WRKBASE}/${BUILD}/.finished

        if [ -n "${FAIL_REASON}" ]; then
            echo "FAIL_REASON=${FAIL_REASON}"
        fi

        if [ -n "${BUILDLOG}" ]; then
            echo "BUILDLOG=${BUILDLOG}"
        fi

        if [ -n "${WRKDIR}" ]; then
            echo "WRKDIR=${WRKDIR}"
        fi
    fi

    echo "STATUS=${STATUS}"

    if [ -n "${BUILDSTATUS}" ]; then
        echo "BUILDSTATUS=${BUILDSTATUS}"
    fi

    return 0
}

poudriere_clean()
{
    BUILD=$1
    PORTSTREE=${POUDRIERE}/ports/${BUILD}

    zfs rollback ${ZFSROOT}${PORTSTREE}@clean

    # There possibly is more cleanup to do here.
    # Also, this "more" may be needed in recover after.

    return 0
}

poudriere_update()
{
    BUILD=$1

    PORTSTREE=${POUDRIERE}/ports/${BUILD}

    if [ ! -d "${PORTSTREE}" ]; then
        echo "Unknown portstree for build ${BUILD}"
        return 1
    fi

    zfs rollback ${ZFSROOT}${PORTSTREE}@clean

    if svn update -q ${PORTSTREE}
    then
	zfs snapshot ${ZFSROOT}${PORTSTREE}@clean2
	zfs destroy ${ZFSROOT}${PORTSTREE}@clean
	zfs rename ${ZFSROOT}${PORTSTREE}@clean2 ${ZFSROOT}${PORTSTREE}@clean
    else
	zfs rollback ${ZFSROOT}${PORTSTREE}@clean
	echo "svn update failed for ${PORTSTREE}"
	return 1
    fi

    return 0
}

poudriere_recover()
{
    BUILD=$1
    PORTSTREE=${POUDRIERE}/ports/${BUILD}

    zfs rollback ${ZFSROOT}${PORTSTREE}@clean

    # There is possibly more cleanup to do here.
    # Also, this "more" may be needed in clean before.

    return 0
}

poudriere_selftest()
{
    BUILD=$1

    if [ ! -d "${POUDRIERE}/jails/${BUILD}" ]; then
        echo "Unknown build ${BUILD}"
        return 1
    fi

    if [ -z "${POUDRIERE}/ports/${BUILD}" ]; then
        echo "Unknown portstree for build ${BUILD}"
        return 1
    fi

    return 0
}


