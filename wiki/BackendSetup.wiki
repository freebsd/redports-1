== !HowTo Setup a Redports Tinderbox Backend ==

A Redports Tinderbox Backend is not much more then a normal Tinderbox but
with a carefully thought out configuration and a few shell scripts.


=== Requirements ===

  * FreeBSD >= 9.0 and ZFS
  * ports-mgmt/tinderbox-devel (>= 3.4)
  * ftp/curl
  * ftp/lftp
  * www/nginx
  * www/spawn-fcgi
  * www/fcgiwrap
  * security/sudo
  * devel/subversion
  * security/ca_root_nss
  * databases/mysql56-server


=== System Setup ===

For the system we need [http://wiki.freebsd.org/ZFS ZFS] because of the snapshot feature to always have a clean portstree. So you should use at least FreeBSD 9.0 or newer. For a Tinderbox CURRENT is recommended but latest STABLE is usually also working fine.

You also need to install all the required ports listed above.

__SSL Certificate Validation:__
For subversion to be able to validate the SSL certificate of svn.redports.org you need to trust the root certificate of StartSSL. That can easily be done by installing security/ca_root_nss and enabling ETCSYMLINK options.


__Hardware considerations (minimum):__
  * CPU: 4 cores or more
  * RAM: 8GB or more
  * 2 harddisks in ZFS RAID1
  * 1 static IP Address

*/boot/loader.conf*:

ZFS ARC wants to consume almost all RAM for caching so we have to reduce it so somewhat around 1/4 of physical RAM.

{{{
# limit ZFS ARC to a sensible amount because we heavily use tmpfs
vfs.zfs.arc_max="8192M"

# increase max swapzone to handle more swap even though we only
# have 6GB of swap          
kern.maxswzone="64M"
}}}


=== Tinderbox Setup ===

MySQL 5.6 is preferred and we also prefer speed over correctness.

*/var/db/mysql/my.cnf*:
{{{
[mysqld]
skip-networking
innodb_buffer_pool_size = 196M

# reduce flushing and I/O
innodb_flush_log_at_trx_commit=0
innodb_support_xa=0
innodb_flush_method = O_DIRECT
}}}

Install your tinderbox as you always do.

*/etc/rc.conf*:
{{{
mysql_enable="YES"
nginx_enable="YES"

tinderd_enable="YES"
tinderd_directory="/usr/local/tinderbox/scripts"
tinderd_flags="-nullfs -onceonly"
tinderd_instances="16"
tinderd_nice="20"
}}}

{{{
cd /usr/local/tinderbox/scripts
./tc Setup
./tc configDistfile -c /usr/ports/distfiles
./tc configOptions -e -o /options
./tc configTinderd -t 20
}}}


=== Redports Setup ===

The redports tinderbox backend consists of a few shell scripts and a tinderbox buildhook. To install the buildhook download rptinderbox and install the buildhook:

{{{
cd /usr/local/www
svn co http://redports.googlecode.com/svn/trunk/rptinderbox remote
chown -R www:www remote

cd /usr/local/tinderbox/scripts
./tc updateHookCmd -h postPortBuild -c /usr/local/www/remote/rptinderbox_buildhook.sh
}}}


Now we need to setup the CGI part of rptinderbox. If you want to use Apache for that this is also fine but I will concentrate on nginx + fcgiwrap in this guide. Nginx is only a webserver and does itself not execute anything. Therefor we need fcgiwrap and spawn-fcgi to run as a FastCGI daemon that executes the shellscripts and delivers the output to nginx.

*/etc/rc.conf*:
{{{
spawn_fcgi_enable="YES"
spawn_fcgi_app="/usr/local/sbin/fcgiwrap"
spawn_fcgi_app_args="-c 8"
spawn_fcgi_bindsocket="/tmp/fastcgi.socket"
}}}

Download rptinderbox and copy everything to /usr/local/www/rptinderbox.

Now we need to setup nginx to protect our cgi scripts because we don't want to let other people control our tinderbox.

*/usr/local/etc/nginx/nginx.conf*:
{{{
http {
    include       mime.types;
    default_type  text/plain;
    # don't forget to add "log" to text/plain in mime.types

    sendfile        off;
    keepalive_timeout  10;

    gzip on;
    gzip_types text/plain;
    gzip_comp_level 4;

    server {
        listen       80;
        server_name  backend1;

        location / {
            root /usr/local/www/nginx;
        }

        location /rptinderbox/ {
            auth_basic    "Redports Backend";
            auth_basic_user_file htpasswd;
            fastcgi_pass  unix:/tmp/fastcgi.socket;
            fastcgi_param SCRIPT_FILENAME /usr/local/www$fastcgi_script_name;
            fastcgi_read_timeout 2400;
            include       fastcgi_params;
        }

        location /logs/ {
            alias  /usr/local/tinderbox/logs/;
            autoindex on;
        }
        location /errors/ {
            alias  /usr/local/tinderbox/errors/;
            autoindex on;
        }

        location /packages/ {
            alias  /usr/local/tinderbox/packages/;
            autoindex on;
        }

        location /wrkdirs/ {
            alias /usr/local/tinderbox/wrkdirs/;
            autoindex on;
        }
    }
}
}}}


*/usr/local/etc/sudoers*:
{{{
# www user is allowed to call rptinderbox script without password
%www ALL=NOPASSWD: /usr/local/www/rptinderbox/rptinderbox
}}}


=== Tinderbox builds ===

The last thing we have to do is create a few Tinderbox builds which consists of a tinderbox jail and portstree. To get this done right also with the ZFS volumes I have created a script that does this for you. So create a few builds like this:

{{{
# FreeBSD 7.4
./rpcreatebuild 7.4 amd64
./rpcreatebuild 7.4 i386

# FreeBSD 8.2
./rpcreatebuild 8.2 amd64
./rpcreatebuild 8.2 i386

# FreeBSD 9.0
./rpcreatebuild 9.0 amd64
./rpcreatebuild 9.0 i386

# FreeBSD 10-CURRENT
./rpcreatebuild 10 amd64
./rpcreatebuild 10 i386

# CLANG
./rpcreatebuild 9-STABLE amd64 CLANG
./rpcreatebuild 9-STABLE i386 CLANG
}}}